********
Cookbook
********

This chapter is a collection of recipes for common tasks in pt_extlist.

Insert the output of an extlist / extbase plugin via typoscript.
================================================================
It is quite simple to insert an extlist / extbase plugin in any mode as a widget directly via typoscript. The following typoscript snippet defines a widget to render a pager anywhere you like.

controller / action
-------------------
Defines the called controller / action pair. That would be Pager / show for a pager, Filterbox / show for a filterbox and List / list for a list.

switchableControllerActions
---------------------------
Defines all callable controller / action combinations within this widget. Must contain at least the default controller / action defined above.

listIdentifier
--------------
listIdentifier is the only needed configuration. Set it to the desired list configuration.

Typoscript::

    pagerWidget = USER
    pagerWidget {
    	userFunc = tx_extbase_core_bootstrap->run
    	pluginName = Pi1
    	extensionName = PtExtlist
    	controller = Pager
    	action = show
    	switchableControllerActions {
    		Pager {
    			1 = show
    		}
    	}
    	
    	persistence =< plugin.tx_ptextlist.persistence
    	view =< plugin.tx_ptextlist.view
    	settings =< plugin.tx_ptextlist.settings
    	
    	settings {
    		listIdentifier = YOURLISTIDENTIFIER
    	}
    } 

Exchange the default template by controller / action.
In default extbase it is only possible to exhenage the complete template folder. Pt_extlist enables you to exchange a single template per list. The example below shows you how to exchange a template. In general it is

``controller.THECONTROLLERNAME.THEACTIONNAME.template = PATHTOTHETEMPLATE``

This holds for any controller / action pair. Check the URL or the template folder for the controller and action names.

:: 

    plugin.tx_ptextlist.settings {
        listConfig.demolist {
            controller.List.list.template = EXT:my_extension/Resources/Private/Templates/NewTemplate.html
        }
    }

Export the list data as a PDF document
======================================
The pdf exporter uses the domPdf library to render the list in HTML-format which is generated by a special fluid template to PDF. It is recommended to use the extension pt_dompdf, which on the one hand provides the dompdf sources and on the other hand fluid-viewHelpers to wrap special methods provided by the domPdf library.
So all you have to do, is to install the pt_dompdf extension and select the export type: PDF export and you get the PDF table in a nice default layout.

Change size and orientation
---------------------------

You can change the page size and the orientation of the PDF in the settings (have a look into the TSRef for the posible values):

::

    plugin.tx_ptextlist.settings.export.exportConfigs.pdfExport {
        paperSize = a4
        paperOrientation =  portrait
    }
    
Change the appearance of the document
-------------------------------------
To change the appearance of the document, you can first edit the CSS stylesheet of the document and second alter the fluid template as well. It is recommended to make a copy of the files and change the paths in the settings:

::

    plugin.tx_ptextlist.settings.export.exportConfigs.pdfExport {
        templatePath = typo3conf/ext/pt_extlist/Resources/Private/Templates/Export/PDF/Default.html
        cssFilePath =  EXT:pt_extlist/Resources/Public/CSS/Export/Pdf.css
        
        headerPartial = Export/PDF/ListHeader
        bodyPartial = Export/PDF/ListBody
        aggregateRowsPartial = Export/PDF/AggregateRows
    }
    
The cssFilePath parameter can either be set as an absolute path on the server or by an URL.

Add a page number to the document
---------------------------------
In domPdf it is a little bit ugly to add page numbers as dynamic changing values to the document. It is done by an inline PHP script in the template. Pt_dompdf provides a viewHelper which generates this inline PHP for you.
Add this viewHelper to the BODY part of your HTML template. The markers {PAGE_NUM} and {PAGE_COUNT} can be used to add the dynamic values to the page.

::

    {namespace dompdf=Tx_PtDompdf_ViewHelpers}
    
    <dompdf:staticText position="bottom-right">
        Page {PAGE_NUM} of {PAGE_COUNT}
    </dompdf:staticText>

Filter by an empty value
========================

You cannot filter by an empty value, because empty values are not submitted at all via the POST array. So what you have to do is cast your empty value in the result set of you MySQL query.

To do this, you define the field where you assume an empty value like this::

    fields {
        fieldWithEmtyValue {
            special = if(table.field = "", "emptyField", table.field)
        }
    }

This way the field is not longer empty in the result set and the filter works as expected.